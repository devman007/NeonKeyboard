// Generated by view binder compiler. Do not edit!
package keyboard.neon.newboard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Space;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import keyboard.neon.newboard.R;
import keyboard.neon.newboard.ime.clip.ClipboardPopupView;

public final class ClipPopupLayoutBinding implements ViewBinding {
  @NonNull
  private final ClipboardPopupView rootView;

  @NonNull
  public final LinearLayout pasteClipItem;

  @NonNull
  public final ImageView pasteClipItemIcon;

  @NonNull
  public final Space pasteClipItemSpace;

  @NonNull
  public final TextView pasteClipItemText;

  @NonNull
  public final LinearLayout pinClipItem;

  @NonNull
  public final ImageView pinClipItemIcon;

  @NonNull
  public final TextView pinClipItemText;

  @NonNull
  public final LinearLayout removeFromHistory;

  @NonNull
  public final ImageView removeFromHistoryIcon;

  @NonNull
  public final TextView removeFromHistoryText;

  private ClipPopupLayoutBinding(@NonNull ClipboardPopupView rootView,
      @NonNull LinearLayout pasteClipItem, @NonNull ImageView pasteClipItemIcon,
      @NonNull Space pasteClipItemSpace, @NonNull TextView pasteClipItemText,
      @NonNull LinearLayout pinClipItem, @NonNull ImageView pinClipItemIcon,
      @NonNull TextView pinClipItemText, @NonNull LinearLayout removeFromHistory,
      @NonNull ImageView removeFromHistoryIcon, @NonNull TextView removeFromHistoryText) {
    this.rootView = rootView;
    this.pasteClipItem = pasteClipItem;
    this.pasteClipItemIcon = pasteClipItemIcon;
    this.pasteClipItemSpace = pasteClipItemSpace;
    this.pasteClipItemText = pasteClipItemText;
    this.pinClipItem = pinClipItem;
    this.pinClipItemIcon = pinClipItemIcon;
    this.pinClipItemText = pinClipItemText;
    this.removeFromHistory = removeFromHistory;
    this.removeFromHistoryIcon = removeFromHistoryIcon;
    this.removeFromHistoryText = removeFromHistoryText;
  }

  @Override
  @NonNull
  public ClipboardPopupView getRoot() {
    return rootView;
  }

  @NonNull
  public static ClipPopupLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ClipPopupLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.clip_popup_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ClipPopupLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.paste_clip_item;
      LinearLayout pasteClipItem = ViewBindings.findChildViewById(rootView, id);
      if (pasteClipItem == null) {
        break missingId;
      }

      id = R.id.paste_clip_item_icon;
      ImageView pasteClipItemIcon = ViewBindings.findChildViewById(rootView, id);
      if (pasteClipItemIcon == null) {
        break missingId;
      }

      id = R.id.paste_clip_item_space;
      Space pasteClipItemSpace = ViewBindings.findChildViewById(rootView, id);
      if (pasteClipItemSpace == null) {
        break missingId;
      }

      id = R.id.paste_clip_item_text;
      TextView pasteClipItemText = ViewBindings.findChildViewById(rootView, id);
      if (pasteClipItemText == null) {
        break missingId;
      }

      id = R.id.pin_clip_item;
      LinearLayout pinClipItem = ViewBindings.findChildViewById(rootView, id);
      if (pinClipItem == null) {
        break missingId;
      }

      id = R.id.pin_clip_item_icon;
      ImageView pinClipItemIcon = ViewBindings.findChildViewById(rootView, id);
      if (pinClipItemIcon == null) {
        break missingId;
      }

      id = R.id.pin_clip_item_text;
      TextView pinClipItemText = ViewBindings.findChildViewById(rootView, id);
      if (pinClipItemText == null) {
        break missingId;
      }

      id = R.id.remove_from_history;
      LinearLayout removeFromHistory = ViewBindings.findChildViewById(rootView, id);
      if (removeFromHistory == null) {
        break missingId;
      }

      id = R.id.remove_from_history_icon;
      ImageView removeFromHistoryIcon = ViewBindings.findChildViewById(rootView, id);
      if (removeFromHistoryIcon == null) {
        break missingId;
      }

      id = R.id.remove_from_history_text;
      TextView removeFromHistoryText = ViewBindings.findChildViewById(rootView, id);
      if (removeFromHistoryText == null) {
        break missingId;
      }

      return new ClipPopupLayoutBinding((ClipboardPopupView) rootView, pasteClipItem,
          pasteClipItemIcon, pasteClipItemSpace, pasteClipItemText, pinClipItem, pinClipItemIcon,
          pinClipItemText, removeFromHistory, removeFromHistoryIcon, removeFromHistoryText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
